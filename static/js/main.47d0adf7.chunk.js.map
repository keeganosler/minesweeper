{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","Cell","value","this","props","isRevealed","isMine","neighbour","isFlagged","_this$props","onClick","cMenu","onContextMenu","getValue","React","Board","state","boardData","_this","initBoardData","height","width","mines","gameStatus","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","isEmpty","randomx","randomy","minesPlanted","getRandomNumber","_this2","updatedData","mine","traverseBoard","el","setState","_this3","revealEmpty","revealBoard","alert","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","_this4","key","src_Cell","_handleCellClick","_handleContextMenu","class","renderBoard","Game","_this$state","src_Board","src_Game","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.47d0adf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nclass Cell extends React.Component {\n  getValue() {\n    const {value} = this.props;\n    \n    if (!value.isRevealed) {\n      return this.props.value.isFlagged ? \"🚩\" : null;\n    }\n    if (value.isMine) {\n      return \"💣\";\n    }\n    if (value.neighbour === 0) {\n      return null;\n    }\n    return value.neighbour;\n  }\n\n  render() {\n    const {value, onClick, cMenu} = this.props;\n    let className =\n      \"cell\" +\n      (value.isRevealed ? \"\" : \" hidden\") +\n      (value.isMine ? \" is-mine\" : \"\") +\n      (value.isFlagged ? \" is-flag\" : \"\");\n\n    return (\n      <div\n        onClick={onClick}\n        className={className}\n        onContextMenu={cMenu}\n      >\n        {this.getValue()}\n      </div>\n    );\n  }\n}\n\n// Board Class\nclass Board extends React.Component {\n  state = {\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n        gameStatus: \"Game in progress\",\n        mineCount: this.props.mines,\n    };\n\n    /* Helper Functions */\n\n    // get mines\n    getMines(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isMine) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Flags\n    getFlags(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isFlagged) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Hidden cells\n    getHidden(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (!dataitem.isRevealed) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get random number given a dimension\n    getRandomNumber(dimension) {\n        // return Math.floor(Math.random() * dimension);\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\n    }\n\n    // Gets initial board data\n    initBoardData(height, width, mines) {\n        let data = this.createEmptyArray(height, width);\n        data = this.plantMines(data, height, width, mines);\n        data = this.getNeighbours(data, height, width);\n        return data;\n    }\n    createEmptyArray(height, width) {\n        let data = [];\n\n        for (let i = 0; i < height; i++) {\n            data.push([]);\n            for (let j = 0; j < width; j++) {\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isMine: false,\n                    neighbour: 0,\n                    isRevealed: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                };\n            }\n        }\n        return data;\n    }\n\n    // plant mines on the board\n    plantMines(data, height, width, mines) {\n        let randomx, randomy, minesPlanted = 0;\n\n        while (minesPlanted < mines) {\n            randomx = this.getRandomNumber(width);\n            randomy = this.getRandomNumber(height);\n            if (!(data[randomx][randomy].isMine)) {\n                data[randomx][randomy].isMine = true;\n                minesPlanted++;\n            }\n        }\n\n        return (data);\n    }\n\n    // get number of neighbouring mines for each board cell\n    getNeighbours(data, height, width) {\n        let updatedData = data, index = 0;\n\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (data[i][j].isMine !== true) {\n                    let mine = 0;\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n                    area.map(value => {\n                        if (value.isMine) {\n                            mine++;\n                        }\n                    });\n                    if (mine === 0) {\n                        updatedData[i][j].isEmpty = true;\n                    }\n                    updatedData[i][j].neighbour = mine;\n                }\n            }\n        }\n\n        return (updatedData);\n    };\n\n    // looks for neighbouring cells and returns them\n    traverseBoard(x, y, data) {\n        const el = [];\n\n        //up\n        if (x > 0) {\n            el.push(data[x - 1][y]);\n        }\n\n        //down\n        if (x < this.props.height - 1) {\n            el.push(data[x + 1][y]);\n        }\n\n        //left\n        if (y > 0) {\n            el.push(data[x][y - 1]);\n        }\n\n        //right\n        if (y < this.props.width - 1) {\n            el.push(data[x][y + 1]);\n        }\n\n        // top left\n        if (x > 0 && y > 0) {\n            el.push(data[x - 1][y - 1]);\n        }\n\n        // top right\n        if (x > 0 && y < this.props.width - 1) {\n            el.push(data[x - 1][y + 1]);\n        }\n\n        // bottom right\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\n            el.push(data[x + 1][y + 1]);\n        }\n\n        // bottom left\n        if (x < this.props.height - 1 && y > 0) {\n            el.push(data[x + 1][y - 1]);\n        }\n\n        return el;\n    }\n\n    // reveals the whole board\n    revealBoard() {\n        let updatedData = this.state.boardData;\n        updatedData.map((datarow) => {\n            datarow.map((dataitem) => {\n                dataitem.isRevealed = true;\n            });\n        });\n        this.setState({\n            boardData: updatedData\n        })\n    }\n\n    /* reveal logic for empty cell */\n    revealEmpty(x, y, data) {\n        let area = this.traverseBoard(x, y, data);\n        area.map(value => {\n            if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n                data[value.x][value.y].isRevealed = true;\n                if (value.isEmpty) {\n                    this.revealEmpty(value.x, value.y, data);\n                }\n            }\n        });\n        return data;\n\n    }\n\n    // Handle User Events\n\n    _handleCellClick(x, y) {\n\n        // check if revealed. return if true.\n        if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n        // check if mine. game over if true\n        if (this.state.boardData[x][y].isMine) {\n            this.setState({gameStatus: \"You Lost.\"});\n            this.revealBoard();\n            alert(\"game over\");\n        }\n\n        let updatedData = this.state.boardData;\n        updatedData[x][y].isFlagged = false;\n        updatedData[x][y].isRevealed = true;\n\n        if (updatedData[x][y].isEmpty) {\n            updatedData = this.revealEmpty(x, y, updatedData);\n        }\n\n        if (this.getHidden(updatedData).length === this.props.mines) {\n            this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n            this.revealBoard();\n            alert(\"You Win\");\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\n        });\n    }\n\n    _handleContextMenu(e, x, y) {\n        e.preventDefault();\n        let updatedData = this.state.boardData;\n        let mines = this.state.mineCount;\n\n        // check if already revealed\n        if (updatedData[x][y].isRevealed) return;\n\n        if (updatedData[x][y].isFlagged) {\n            updatedData[x][y].isFlagged = false;\n            mines++;\n        } else {\n            updatedData[x][y].isFlagged = true;\n            mines--;\n        }\n\n        if (mines === 0) {\n            const mineArray = this.getMines(updatedData);\n            const FlagArray = this.getFlags(updatedData);\n            if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n                this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n                this.revealBoard();\n                alert(\"You Win\");\n            }\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: mines,\n        });\n    }\n\n    renderBoard(data) {\n        return data.map((datarow) => {\n            return datarow.map((dataitem) => {\n                return (\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\n                        <Cell\n                            onClick={() => this._handleCellClick(dataitem.x, dataitem.y)}\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\n                            value={dataitem}\n                        />\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n                    </div>);\n            })\n        });\n\n    }\n\n  render() {\n        return (\n            <div className=\"board\">\n                <div className=\"my-info\">\n                    <button class=\"icon\"><a href=\"https://github.com/keeganosler\"><i class=\"fa fa-github-square\"></i></a></button>\n                    <button class=\"icon\"><a href=\"https://www.linkedin.com/in/keegan-osler-63a559177\"><i class=\"fa fa-linkedin-square\"></i></a></button>\n                </div>\n                <div className=\"game-info\">\n                    <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n                    <h1 className=\"info\">{this.state.gameStatus}</h1>\n                </div>\n                {\n                    this.renderBoard(this.state.boardData)\n                }\n            </div>\n        );\n    }\n}\n\n// Game Class\nclass Game extends React.Component {\n  state = {\n    height: 8,\n    width: 8,\n    mines: 10\n  };\n\n  render() {\n    const { height, width, mines } = this.state;\n    return (\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}